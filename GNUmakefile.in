# -*-Makefile-*-

depth = .

SUBDIRS = python scripts \
	flower lily \
	mf ly \
	tex ps scm \
	po \
	elisp vim \
	input \
	$(documentation-dir)


## this convoluted construction is necessary, since we don't know the
## value of DOCUMENTATION here.
documentation-dir=$(if $(findstring no,$(DOCUMENTATION)),,Documentation)

SCRIPTS = configure autogen.sh smart-autogen.sh smart-configure.sh
README_FILES = COPYING COPYING.FDL DEDICATION ROADMAP HACKING \
  LICENSE LICENSE.DOCUMENTATION
TOPDOC_FILES = AUTHORS INSTALL README NEWS
TOPDOC_TXT_FILES = $(foreach T,$(TOPDOC_FILES),Documentation/$(outdir)/topdocs/$(T).txt)

RELEASE_FILES = RELEASE-COMMIT
RELEASE_OUT_FILES = $(RELEASE_FILES:%=$(outdir)/%)
INSTALLATION_DIR=$(local_lilypond_datadir)
INSTALLATION_FILES=$(config_make) VERSION
GENERATED_BUILD_FILES=configure aclocal.m4 autogen.sh
# bootstrap stepmake:
#
STEPMAKE_TEMPLATES=toplevel po install
LOCALSTEPMAKE_TEMPLATES=lilypond

include $(depth)/make/stepmake.make

.PHONY: test info website

dist: $(GENERATED_BUILD_FILES) top-doc refresh-release-files .gitfilelist
	@if ! test -d  $(top-src-dir)/.git ; \
	  then echo "***   dist needs a git repository" \
	    exit 1 ;  \
	  fi
	@cd $(top-src-dir) && if ! git diff --quiet HEAD ; \
	  then echo "***   dist must been rolled on a clean git tree;"; \
	    echo "uncommitted changes detected, aborting."; \
	    exit 1 ;  \
	  fi
	rm -rf $(distdir)
	mkdir -p  $(distdir)
	$(LN) $(RELEASE_OUT_FILES) $(TOPDOC_TXT_FILES) $(distdir)
	$(LN) $(GENERATED_BUILD_FILES:%=$(src-dir)/%) .gitfilelist $(distdir)
	cd $(top-src-dir) && xargs $(PYTHON) $(buildscript-dir)/mass-link.py hard . $(distdir) <$(top-build-dir)/.gitfilelist
	chmod -R a+r $(distdir)
	chmod  a+x `find $(distdir) -type d -print`
	(cd $(outdir); \
		$(TAR) --sort=name --mtime="$$(git --git-dir=$(top-src-dir)/.git log -1 --format=%cD)" \
		-cf - --owner=0 --group=0 $(DIST_NAME) | gzip -9 > $(DIST_NAME).tar.gz)
	rm -rf $(distdir)

top-doc:
	$(MAKE) -C Documentation $(foreach T,$(TOPDOC_FILES),$(outdir)/topdocs/$(T).txt)

ifneq ($(shell find $(top-src-dir) -name .git),)
.gitfilelist: $(top-src-dir)/.git/index
	$(call ly_progress,Making,$@,)
	cd $(top-src-dir) && git ls-files >$(top-build-dir)/$@
local-clean-filelist:
	rm -f .gitfilelist
else
.gitfilelist: $(src-dir)/.gitfilelist
	$(call ly_progress,Making,$@,(copy))
	cp $< $@
local-clean-filelist:
endif

all: $(outdir)/VERSION

$(outdir)/VERSION: $(config_make) VERSION
	$(call ly_progress,Making,$@,)
	-mkdir -p $(outdir)
	echo $(TOPLEVEL_VERSION) > $@

$(outdir)/RELEASE-COMMIT:
	$(call ly_progress,Making,$@,)
	git --git-dir=$(top-src-dir)/.git show --no-patch HEAD > $@

refresh-release-files:
	@if ! test -d  $(top-src-dir)/.git ; \
	  then echo "***   dist needs a git repository" \
	    exit 1 ;  \
	  fi
	rm -f $(RELEASE_OUT_FILES)
	$(MAKE) $(RELEASE_OUT_FILES)

local-clean: local-clean-filelist

info:
	$(foreach d, $(INFO_DIRECTORIES),$(MAKE) -C $(d) out=www info && ) true

install-info: info
	$(MAKE) out=www COPY_INFO_IMAGES=1 install-info-WWW

install-help2man:
	$(MAKE) -C scripts man install-help2man
	$(MAKE) -C lily man install-help2man

install-doc:
	$(MAKE) out=www install-WWW
	$(MAKE) out=www install-info-WWW

uninstall-doc:
	$(MAKE) out=www uninstall-WWW

local-install:
	$(INSTALL) -d $(DESTDIR)$(local_lilypond_datadir)

final-install:
	@true

# All web targets, except info image symlinks and info docs are
# installed in non-recursing target from TOP-SRC-DIR
install-WWW:
	-$(INSTALL) -m 755 -d $(DESTDIR)$(webdir)
	rsync -rl --exclude='*.signature' $(outdir)/offline-root/ $(DESTDIR)$(webdir)

install-info-WWW:
	$(foreach d, $(INFO_DIRECTORIES),$(MAKE) -C $(d) install-info && ) true

uninstall-WWW:
	rm -rf $(DESTDIR)$(webdir)
	-rmdir $(package_docdir)
	$(MAKE) -C Documentation uninstall


# For online docs with content negotiation, issue `make doc WEB_TARGETS=online'
# For both online and offline docs, issue `make doc WEB_TARGETS="offline online"'
WEB_TARGETS = offline

WEB_ROOT_FILES = $(WEB_TARGETS:%=$(outdir)/%-root/index.html)

WWW-post: $(top-build-dir)/.htaccess $(WEB_ROOT_FILES)

# need UTF8 setting in case this is hosted on a website.
$(top-build-dir)/.htaccess:
	$(call ly_progress,Making,$@,)
	( echo 'AddDefaultCharset utf-8' ; \
	  echo 'AddCharset utf-8 .html' ; \
	  echo 'AddCharset utf-8 .en' ; \
	  echo 'AddCharset utf-8 .nl' ; \
	  echo 'AddCharset utf-8 .txt' ) > $@

$(outdir)/%-root/index.html: doc-build
	$(call ly_progress,Making,$@,)
	rm -rf $(dir $@)/
	mkdir -p $(dir $@)/Documentation/
	for d in . musicxml abc2ly lilypond-book ; do \
		mkdir -p $(dir $@)/input/regression/$${d}; \
		cp --link -a input/regression/$${d}/out-www/*  $(dir $@)/input/regression/$${d}/ ; \
	done
	cp --link -a Documentation/out-www/webdoc/* $(dir $@)/Documentation/
	$(PYTHON) $(buildscript-dir)/www_post.py $(PACKAGE_NAME) $(TOPLEVEL_VERSION) $(dir $@) "$*"
	find $(outdir)/$*-root -type l | xargs rm -f
	cd $(outdir)/$*-root && find -name \*.html -execdir $(buildscript-dir)/fix-docsize.sh {} +
	perl -i -pe 's#(href)="\.\./Documentation/#\1="#g' $(dir $@)/Documentation/*html
	perl -i -pe 's#(href)="\.\./\.\./Documentation/#\1="../#g' $(dir $@)/Documentation/*/*html

doc-build:
	$(MAKE) out=www -C Documentation/ doc

website: $(outdir)/website-root/index.html

$(outdir)/website-root/index.html: website-build
	$(call ly_progress,Making,$@,)
	rm -rf $(dir $@)/
	mkdir -p $(dir $@)/
	cp -a Documentation/out-web/website/web/* $(dir $@)/
	$(foreach d,css misc pictures ly-examples,\
		cp -a Documentation/out-web/website/$(d) $(dir $@)/ &&) true
	$(PYTHON) $(buildscript-dir)/www_post.py $(PACKAGE_NAME) $(TOPLEVEL_VERSION) $(dir $@) "offline"
	perl -i -pe 's#(href|src)="\.\./(misc|pictures|ly-examples|css)#\1="\2#g' $(dir $@)/*html
	perl -i -pe 's#(href)="\.\./web/#\1="#g' $(dir $@)/*html

website-build:
	$(MAKE) out=web WEB_VERSION=yes -C Documentation/ website

# For those who cannot for the life in them remember to type
# WEB_TARGETS=..., just bloody make all doc stuff, already.
all-doc:
	$(MAKE) WEB_TARGETS='online offline' doc

tree-prefix = $(outdir)
tree-bin = $(tree-prefix)/bin
tree-share = $(tree-prefix)/share

# Don't put version numbers here. During development
# they make no sense, and cause EPS files to become invalid.

tree-share-prefix = $(tree-share)/lilypond/current

src-ext = c cc yy ll hh icc py scm tex ps texi itexi tely itely sh

doc-clean: snippets-clean $(tree-share-prefix)/lilypond-force

default: $(config_h) build-dir-setup doc-messages

build-dir-setup: $(tree-share-prefix)/lilypond-force

# Preparing LilyPond tree for build-dir exec
link-tree: $(tree-share-prefix)/lilypond-force

$(tree-share-prefix)/lilypond-force: GNUmakefile $(outdir)/VERSION
	$(call ly_progress,Making,$@,)
	cd $(top-build-dir)/$(outbase) && rm -rf bin share
	mkdir -p $(tree-bin)
	mkdir -p $(tree-share-prefix)
	mkdir -p $(tree-share-prefix)/elisp
	mkdir -p $(tree-share-prefix)/fonts
	mkdir -p $(tree-share-prefix)/fonts/otf
	mkdir -p $(tree-share-prefix)/fonts/svg
	mkdir -p $(tree-share-prefix)/fonts/enc
	mkdir -p $(tree-share-prefix)/tex
	cd $(tree-bin) && \
		ln -sf ../../lily/$(outconfbase)/lilypond . && \
		for i in abc2ly convert-ly etf2ly lilymidi lilypond-book lilypond-invoke-editor midi2ly musicxml2ly; \
			do ln -sf ../../scripts/$(outconfbase)/$$i . ; done
	cd $(tree-share-prefix) && \
		ln -s $(top-src-dir)/ly ly && \
		ln -s ../../../../mf mf && \
		ln -s $(top-src-dir)/ps && \
		ln -s $(top-src-dir)/python && \
		ln -s $(top-src-dir)/scm && \
		ln -s $(top-src-dir)/scripts scripts
	cd $(tree-share-prefix)/tex && \
		ln -s $(top-src-dir)/tex source && \
		ln -s ../../../../../tex/$(outconfbase) tex-out && \
		true
	cd $(tree-share-prefix)/fonts && \
		ln -s $(top-src-dir)/mf source && \
		true
	-cd $(tree-share-prefix)/elisp && \
		ln -sf ../../../../../elisp/$(outconfbase)/lilypond-words.el . && \
		ln -s $(top-src-dir)/elisp/*.el .
	touch $(tree-share-prefix)/lilypond-force

link-mf-tree: $(tree-share-prefix)/mf-link-tree

$(tree-share-prefix)/mf-link-tree: $(tree-share-prefix)/lilypond-force
	$(call ly_progress,Making,$@,)
	-rm -f $(tree-share-prefix)/fonts/otf/* &&  \
	rm -f $(tree-share-prefix)/fonts/svg/* &&  \
	rm -f $(tree-share-prefix)/fonts/fonts.conf &&  \
	rm -f $(tree-share-prefix)/fonts/00-lilypond-fonts.conf &&  \
	rm -f $(tree-share-prefix)/fonts/99-lilypond-fonts.conf &&  \
	cd $(tree-share-prefix)/fonts/otf && \
		ln -s ../../../../../../mf/$(outconfbase)/*.otf . && \
		$(foreach i,$(addprefix $(TEXGYRE_DIR)/,$(TEXGYRE_FILES)), \
			ln -s $i . && ) true && \
		$(foreach i,$(addprefix $(URWOTF_DIR)/,$(URWOTF_FILES)), \
			ln -s $i . && ) true
	-cd $(tree-share-prefix)/fonts && \
		ln -s ../../../../../mf/$(outconfbase)/fonts.conf . && \
		ln -s ../../../../../mf/$(outconfbase)/00-lilypond-fonts.conf . && \
		ln -s ../../../../../mf/$(outconfbase)/99-lilypond-fonts.conf .
	-cd $(tree-share-prefix)/fonts/svg && \
		ln -s ../../../../../../mf/$(outconfbase)/*.svg .
	-cd $(tree-share-prefix)/fonts/svg && \
		ln -s ../../../../../../mf/$(outconfbase)/*.woff .
	touch $(tree-share-prefix)/mf-link-tree

TAGS.make: dummy
	$(call ly_progress,Making,$@,)
	etags -o $@ $(find $(top-src-dir) -name 'GNUmakefile*' -o -name '*.make')

$(config_h): config.hh.in
#
# this is to prevent people from getting
# undefined symbols  when we add them to config.h.in,
# and they blindly run "cvs update; make".
#
	@echo
	@echo ' *** $(config_h) is out of date'
	@echo ' *** Remove it and rerun autogen:'
	@echo '         rm $(config_h); ./autogen.sh'
	@echo
	@false

grand-replace:
	cd $(top-src-dir) && $(PYTHON) $(buildscript-dir)/grand-replace.py


################################################################
# testing

BASELINE_STAMP:=$(top-build-dir)/out-baseline/.test-baseline-done
RESULT_DIR=$(top-build-dir)/out/test-results

test-pre: $(tree-share-prefix)/lilypond-force
	$(call make_subdirs,python scripts flower lily mf,all)

test: test-pre
	$(MAKE) -C python local-test
	$(MAKE) -C scripts/build local-test
	$(MAKE) -C ly local-test
	@echo 'To begin investigating regression-test crashes, use'
	@echo
	@echo '    grep sourcefilename `grep -L systems.texi out/lybook-testdb/*/*log|sed s/log/ly/g`'
	@echo
	$(MAKE) -C input/regression out=test lysdoc-gittxt lysdoc-test
	$(MAKE) -C input/regression/abc2ly out=test lysdoc-test
	$(MAKE) -C input/regression/lilypond-book out=test local-test
	$(MAKE) -C input/regression/midi out=test lysdoc-test
	$(MAKE) -C input/regression/musicxml out=test lysdoc-test

test-baseline-pre:
	cd $(top-src-dir) && \
		if test -d .git ; then \
			if ! git diff --exit-code > /dev/null ; then \
				echo "*** commit before base lining" 1>&2; \
				exit 1; \
			fi \
		fi
	$(MAKE) test-clean
	$(MAKE) test

test-baseline: test-baseline-pre
	rm -f $(BASELINE_STAMP)
#       Make a copy of the fonts that all subdir baselines can share.
	$(call ly_progress,Synching,out-baseline/share/lilypond/current/fonts,from out)
	mkdir -p $(top-build-dir)/out-baseline/share/lilypond/current
	rsync -L -a -q --delete --exclude source \
		$(top-build-dir)/out/share/lilypond/current/fonts \
		$(top-build-dir)/out-baseline/share/lilypond/current
	$(MAKE) out=test -C input/regression local-test-baseline
	$(MAKE) out=test -C input/regression/abc2ly local-test-baseline
	$(MAKE) out=test -C input/regression/midi local-test-baseline
	$(MAKE) out=test -C input/regression/musicxml local-test-baseline
	$(MAKE) test-snippets-clean
	touch $(BASELINE_STAMP)

local-check-pre:
	[ -f $(BASELINE_STAMP) ] || \
	  ( echo "*** no baseline for comparison" 1>&2 && false )
	$(MAKE) test

local-check: local-check-pre
	rm -rf $(RESULT_DIR)
	mkdir -p $(RESULT_DIR)
	$(PYTHON) $(buildscript-dir)/output-distance.py $(if $(VERBOSE),-v) \
		--local-datadir --output-dir $(RESULT_DIR) \
		input/regression/out-test-baseline input/regression/out-test \
		input/regression/abc2ly/out-test-baseline input/regression/abc2ly/out-test \
		input/regression/midi/out-test-baseline input/regression/midi/out-test \
		input/regression/musicxml/out-test-baseline input/regression/musicxml/out-test
ifneq ($(TIDY),false)
	find $(RESULT_DIR) -name '*.html' | while read f ; do \
		echo "Validating $$f" ; \
		$(TIDY) -q -o /dev/null "$$f" || exit 1 ; \
	done
endif
	@find input ly -name '*.ly' -print |grep -v 'out.*/' | xargs grep '\\version' -L | grep -v "standard input" |sed 's/^/**** Missing version: /g'

test-clean: test-snippets-clean
	rm -rf $(RESULT_DIR)
	$(MAKE) -C input/regression out=test clean

snippets-clean:
	rm -rf out/lybook-db

test-snippets-clean:
	rm -rf out/lybook-testdb
