#!/usr/bin/env perl
# -*- coding: utf-8; -*-

### texi2html customization script for LilyPond
### Author: Reinhold Kainhofer <reinhold@kainhofer.com>, 2008.
###         Some code parts copied from texi2html and adapted. These functions
###         were written mainly by Patrice Dumas
### License: GPLv3+
###
###
### Features implemented here:
### -) TOC (folded, with the current page highlighted) in an overflown <div>
###    is added to every page; implemented by:
###           lilypond_print_page_head -- start <div id="main">
###           lilypond_print_page_foot -- closing id=main, output of footer & TOC
### -) Internal refs are formatted without the 'section ' prefix.
### -) External refs are formatted only as "Text of the node" (not as >>see
###    "NODE" section "SECTION" in "BOOK"<< like with default texi2html). Also,
###    the leading "(book-name)" is removed.
###    Implemented by overriding lilypond_external_ref
### -) Custom navigation bars on top/bottom of the page and between sections;
###    Implemented in lilypond_print_navigation
### -) Different formatting than the default: example uses the same formatting
###    as quote.
### -) Use the standard footnote format "<sup>nr</sup> text" instead of the
###    ugly format of texi2html (<h3>(nr)</h3><p>text</p>). Implemented in
###           makeinfo_like_foot_line_and_ref
###           makeinfo_like_foot_lines
###           makeinfo_like_paragraph
### -) In tables, don't wrap <p> around the contents. Implemented in
###           makeinfo_like_paragraph
###
###
### Useful helper functions:
### -) texinfo_file_name($node_name): returns a texinfo-compatible file name
###    for the given string $node_name (whitespace trimmed/replaced by -,
###    non-standard chars replaced by _xxxx (ascii char code) and forced to
###    start with a letter by prepending t_g if necessary)

package Texi2HTML::Config;


use utf8;
use Encode qw(decode);

sub ly_get_language () {
    my $lang = $Texi2HTML::THISDOC{'documentlanguage'};
    # Old key for texi2html-1.82
    $lang = $Texi2HTML::THISDOC{'current_lang'} if !defined $lang;
    return $lang;
}

# Translations declared in lilypond-texi2html-lang.init.

sub ly_get_string () {
    my $lang = ly_get_language ();
    my $string = shift;
    if ($lang and $lang ne "en" and $LY_LANGUAGES->{$lang}->{$string}) {
	return $LY_LANGUAGES->{$lang}->{$string};
    } else {
	return $string;
    }
}


#############################################################################
### FUNCTIONALITY FOR MAIN WEB PAGES
#############################################################################

our $web_manual;

#############################################################################
###  SETTINGS FOR TEXI2HTML
#############################################################################

# Validation fix for texi2html<=1.82
$Texi2HTML::Config::DOCTYPE = '<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">';

@Texi2HTML::Config::CSS_REFS = (
    "css/lilypond-manuals.css",
    "css/lilypond-highlighting.css"
    );

sub web_settings() {
  print STDERR "Processing web site: [" . ly_get_language () . "]\n";
  $Texi2HTML::Config::BODYTEXT = "";
  @Texi2HTML::Config::CSS_REFS      = (
      "css/lilypond-website.css"
      );
}

$Texi2HTML::Config::USE_ACCESSKEY = 1;
$Texi2HTML::Config::USE_LINKS     = 1;
$Texi2HTML::Config::USE_REL_REV   = 1;
$Texi2HTML::Config::SPLIT_INDEX   = 0;
$Texi2HTML::Config::SEPARATED_FOOTNOTES = 0; # Print footnotes on same page, not separated

$Texi2HTML::Config::DO_CONTENTS = 1;
$Texi2HTML::Config::NODE_FILES = 1;

# The default has changed to 'class="no-bullet"' in texi2html 5.0.
$Texi2HTML::Config::NO_BULLET_LIST_CLASS = 'toc';

$default_node_file_name = $Texi2HTML::Config::node_file_name;
$Texi2HTML::Config::node_file_name = \&lilypond_node_file_name;

$Texi2HTML::Config::anchor  = \&lilypond_anchor;
$Texi2HTML::Config::element_target_name  = \&lilypond_element_target_name;
$default_print_page_head = $Texi2HTML::Config::print_page_head;
$Texi2HTML::Config::print_page_head      = \&lilypond_print_page_head;
$Texi2HTML::Config::print_page_foot      = \&lilypond_print_page_foot;
$Texi2HTML::Config::print_navigation     = \&lilypond_print_navigation;
$Texi2HTML::Config::print_title          = \&lilypond_print_title;
$Texi2HTML::Config::about_body           = sub { return ''; };
$default_internal_ref = $Texi2HTML::Config::internal_ref;
$Texi2HTML::Config::internal_ref         = \&lilypond_internal_ref;
$Texi2HTML::Config::external_ref         = \&lilypond_external_ref;
$default_external_href = $Texi2HTML::Config::external_href;
$Texi2HTML::Config::external_href        = \&lilypond_external_href;
# $Texi2HTML::Config::foot_line_and_ref    = \&lilypond_foot_line_and_ref;
$Texi2HTML::Config::foot_line_and_ref  = \&makeinfo_like_foot_line_and_ref;
$Texi2HTML::Config::foot_lines         = \&makeinfo_like_foot_lines;
$Texi2HTML::Config::paragraph          = \&makeinfo_like_paragraph;



# Examples should be formatted similar to quotes:
$Texi2HTML::Config::complex_format_map->{'example'} = {
  'begin' => q{"<blockquote>"},
  'end' => q{"</blockquote>\n"},
  'style' => 'code',
 };

%Texi2HTML::config::misc_pages_targets = (
   'Overview' => 'Overview',
   'Contents' => 'Contents',
   'About' => 'About'
);


#############################################################################
###  HELPER FUNCTIONS
#############################################################################

# only lc() the last portion of an href
sub lc_last($)
{
  my $href = shift;
  my @hrefsplit = split('/', $href);
  # change the last portion (the filename), if it exists;
  # if it is a plain filename with no path, change the string as a whole
  if ($#hrefsplit > 0) {
    @hrefsplit[$#hrefsplit] = lc( @hrefsplit[$#hrefsplit] );
    $href = join("/", @hrefsplit);
  } else {
    $href = lc($href);
  }
  return $href;
}

# Convert a given node name to its proper file name (normalization as explained
# in the texinfo manual:
# http://www.gnu.org/software/texinfo/manual/texinfo/html_node/HTML-Xref-Node-Name-Expansion.html
sub texinfo_file_name($)
{
  my $text = shift;
  my $result = '';
  # File name normalization by texinfo:
  # 1/2: letters and numbers are left unchanged
  # 3/4: multiple, leading and trailing whitespace is removed
  $text = main::normalise_space($text);
  # 5/6: all remaining spaces are converted to '-', all other 7- or 8-bit
  #      chars are replaced by _xxxx (xxxx=ascii character code)
  while ($text ne '') {
    if ($text =~ s/^([A-Za-z0-9]+)//o) { # number or letter stay unchanged
      $result .= $1;
    } elsif ($text =~ s/^ //o) { # space -> '-'
      $result .= '-';
    } elsif ($text =~ s/^(.)//o) { # Otherwise use _xxxx (ascii char code)
      my $ccode = ord($1);
      if ( $ccode <= 0xFFFF ) {
        $result .= sprintf("_%04x", $ccode);
      } else {
        $result .= sprintf("__%06x", $ccode);
      }
    }
  }
  # 7: if name does not begin with a letter, prepend 't_g' (so it starts with a letter)
  if ($result !~ /^[a-zA-Z]/) {
    $result = 't_g' . $result;
  }
  # DONE
  return lc_last($result)
}

# Split the given path into dir and basename (with .texi removed). Used mainly
# to get the path/basename of the original texi input file
sub split_texi_filename ($)
{
  my $docu = shift;
  my ($docu_dir, $docu_name);
  if ($docu =~ /(.*\/)/) {
    chop($docu_dir = $1);
    $docu_name = $docu;
    $docu_name =~ s/.*\///;
  } else {
     $docu_dir = '.';
     $docu_name = $docu;
  }
  $docu_name =~ s/\.te?x(i|info)?$//;
  return ($docu_dir, $docu_name);
}


#############################################################################
###  SPLITTING BASED ON NUMBERED SECTIONS
#############################################################################

sub lilypond_node_file_name($$)
{
  my $element = shift;
  my $type = shift;

  return lc(&$default_node_file_name($element, $type));
}

# This function produces an anchor.
#
# arguments:
# $name           :   anchor name
# $href           :   anchor href
# text            :   text displayed
# extra_attribs   :   added to anchor attributes list
sub lilypond_anchor($;$$$)
{
    my $name = shift;
    my $href = shift;
    my $text = shift;
    my $attributes = shift;
    if (!defined($attributes) or ($attributes !~ /\S/))
    {
        $attributes = '';
    }
    else
    {
        $attributes = ' ' . $attributes;
    }
    $name = '' if (!defined($name) or ($name !~ /\S/));
    $href = '' if (!defined($href) or ($href !~ /\S/));
    $text = '' if (!defined($text));
    return $text if (($name eq '') and ($href eq ''));
    $name = "name=\"$name\"" if ($name ne '');
    $href = "href=\"$href\"" if ($href ne '');
    $href = ' ' . $href if (($name ne '') and ($href ne ''));
    return "<a ${name}${href}${attributes}>$text</a>";
}


sub lilypond_element_target_name($$$)
{
  my $element = shift;
  my $target = shift;
  my $id = shift;
  # Target is based on node name (or sec name for secs without node attached)
  my $node_name = main::remove_texi($element->{'node_ref'}->{'texi'});
  if ($node_name eq '') {
    $node_name = main::remove_texi($element->{'texi'});
  }

  my $anchor = $node_name;
  # normalize to the same file name as texinfo
  $target = texinfo_file_name($anchor);

  # TODO: Once texi2html correctly prints out the target and not the id for
  #       the sections, change this back to ($id, $target)
  # I don't understand this comment, so I'm reluctant to delete it -gp
  $target = lc_last($target);
  $id = lc($target);
# $id =~ s/-1$//i; # remove any trailing "-1"
  return ($target, $id);
}

sub lilypond_init ()
{
    $Texi2HTML::THISDOC{'do_about'} = 0;

    my ($docu_dir, $docu_name) = split_texi_filename ($Texi2HTML::THISDOC{'input_file_name'});
    if ($docu_name eq 'web') {
	$web_manual = 1;
	web_settings();
    }
}
push @Texi2HTML::Config::command_handler_init, \&lilypond_init;

sub lilypond_bodytext ()
{
  ## This section makes the manual name visible to CSS through the body tag
  ## so that styles can be applied per manual. It will add the manual
  ## directory name (e.g., 'notation' or 'learning') as a CSS class.

  # Parse the input file name to determine the manual we're dealing with.
  my ($docu_dir, $docu_name) = split_texi_filename ($Texi2HTML::THISDOC{'input_file_name'});

  # Create the extra information for the <body> tag.
  # For example, the development Notation reference in English
  # will output in HTML as <body lang='en' class='notation'>
  my $bodytext = 'lang="' . ly_get_language () . '" class="' . $docu_name . '"';

  $Texi2HTML::THISDOC{'BODYTEXT'} = $bodytext;
  # Set the global config variable for texi2html-1.82 which sets the previous
  # variable at the beginning of init_out.
  $Texi2HTML::Config::BODYTEXT = $bodytext;
}
push @Texi2HTML::Config::command_handler_process, \&lilypond_bodytext;


#############################################################################
###  CLEANER LINK TITLE FOR INTERNAL REFS
#############################################################################

# Never use 'section ' as a prefix to the link text.
#
# Ideally, we would like to simply use command-line option `--short-ref`
# instead of providing a customized handler.  Unfortunately, this option
# drops formatting stuff like `<code>` in link texts, so we take a different
# route by setting `$is_section` to false, which has the desired effect.

sub lilypond_internal_ref($$$$$$$)
{
    my $type = shift;
    my $href = shift;
    my $short_name = shift;
    my $name = shift;
    my $is_section = shift;

    $is_section = 0;

    my $args_texi = shift;
    my $formatted_args = shift;

    return &$default_internal_ref ($type, $href, $short_name, $name,
                                   $is_section, $args_texi, $formatted_args);
}


#############################################################################
###  CLEANER LINK TITLE FOR EXTERNAL REFS
#############################################################################

# The default formatting of external refs returns e.g.
# "(lilypond-internals)Timing_translator", so we remove all (...) from the
# file_and_node argument. Also, we want only a very simple format, so we don't
# even call the default handler!
sub lilypond_external_ref($$$$$$)
{
  my $type = shift;
  my $section = shift;
  my $book = shift;
  my $file_node = shift;
  my $href = shift;

  $href = lc_last($href);

  my $cross_ref = shift;
  my $args_texi = shift;
  my $formatted_args = shift;
  my $node = shift;

  # In texi2html-1.82, the node was passed as the section in case that was not
  # available. Since version 5.0, the node is passed as an additional argument.
  if ($section eq '' and defined $node) {
    $section = $node;
  }

  my $displaytext = '';

  # 1) if we have a cross ref name, that's the text to be displayed:
  # 2) For the top node, use the (printable) name of the manual, unless we
  #    have an explicit cross ref name
  # 3) In all other cases use the section name
  if ($cross_ref ne '') {
    $displaytext = $cross_ref;
  } elsif (($section eq '') or ($section eq 'Top')) {
    $displaytext = $book;
  } else {
    $displaytext = $section;
  }

  $displaytext = &$anchor('', $href, $displaytext) if ($displaytext ne '');
  return $displaytext;
}





# Construct a href to an external source of information.
# node is the node with texinfo @-commands
# node_id is the node transliterated and transformed as explained in the
#         texinfo manual
# node_xhtml_id is the node transformed such that it is unique and can
#     be used to make an html cross ref as explained in the texinfo manual
# file is the file in '(file)node'
sub lilypond_external_href($$$)
{
  my $node = shift;
  my $node_id = shift;
  my $node_xhtml_id = shift;
  my $file = shift;

  if (defined $file) {
    $href = &$default_external_href($node, $node_id, $node_xhtml_id, $file);

    if ($web_manual) {
      my $only_web_version = $ENV{ONLY_WEB_VERSION};
      if ($only_web_version) {
        $href = "../../doc/".$only_web_version."/Documentation/web/".$href;
      }
    }

    return $href;
  } else {
    $href = &$default_external_href($node, $node_id, $node_xhtml_id);
    return $href;
  }
}

sub lilypond_print_title ()
{
  return "";
}



#############################################################################
###  CUSTOM TOC FOR EACH PAGE (in a frame on the left)
#############################################################################

sub lilypond_print_toc_div ($)
{
    my $fh = shift;

    print $fh "\n\n<div id=\"tocframe\">\n";

    # Remove the leading "GNU LilyPond --- " from the manual title
    my $topname = $Texi2HTML::NAME{'Top'};
    $topname =~ s/^GNU LilyPond(:| &[mn]dash;) //;

    # construct the top-level Docs index (relative path and including language!)
    my $lang = ly_get_language ();
    if ($lang and $lang ne "en") {
      $lang .= ".";
    } else {
      $lang = "";
    }
    my $reldir = $ENV{DEPTH};
    # add a / at the end if there isn't one.
    if (substr ($reldir, -1) ne '/') {
        $reldir .= '/';
    }
    my $uplink = $reldir."Documentation/web/manuals.${lang}html";

    if (not $web_manual) {
      print $fh "<p class=\"toc_uplink\"><a href=\"$uplink\"
         title=\"Documentation Index\">&lt;&lt; " .
	 &ly_get_string ('Back to Documentation Index') .
	 "</a></p>\n";

      print $fh '<h4 class="toc_header"> ' . &$anchor('',
                                    $Texi2HTML::HREF{'Top'},
                                    $topname . " <!-- Sidebar Version Tag  --> ",
                                    'title="Start of the manual"'
                                   ) . "</h4>\n";
    }

    # Find the path to the current element
    my $element = $Texi2HTML::THIS_ELEMENT;
    my %parentelements;
    while ($element and not $element->{'top'}) {
        $parentelements{$element->{'tocid'}} = 1;
        $element = $element->{'sectionup'};
    }

    foreach my $line (@{$Texi2HTML::TOC_LINES}) {
        if ($line =~ /<a name="(.*)" href/ and $parentelements{$1}) {
            # Copy the line to avoid modifying the original string. More recent
            # versions of Perl (5.14, released in 2011) support non-destructive
            # substitutions via option /r. To support Perl 5.10 in GUB, use the
            # old way of doing it.
            my $current_line = $line;
            $current_line =~ s/<li>/<li class="toc_current">/;
            print $fh $current_line;
        } else {
            print $fh $line;
        }
    }

    local $/=undef;
    my $name = "search-box";
    $lang = ly_get_language ();
    open FILE, "$ENV{TOP_SRC_DIR}/Documentation/$lang/$name.ihtml" or
        open FILE, "$ENV{TOP_SRC_DIR}/Documentation/en/$name.ihtml" or
        die "no such file: $name.ihtml: $!";
    my $search_string = decode ('UTF-8', <FILE>);
    # We depend on an external entity here, which we cannot control.  Suppose
    # we go from 2.23.x to 2.25.x and put the documentation under "v2.25".
    # For some time, Google won't have the new location in its index, so the
    # search would get nothing.  It is better to keep "v2.23" in the search for
    # a while.
    my $search_site = "lilypond.org/doc/v2.25";
    if ($web_manual) {
        $search_site = "lilypond.org";
    }
    $search_string =~ s/\{\{site\}\}/site:$search_site/g;
    print $fh $search_string;
    close FILE;

    print $fh "</div>\n\n";
}

sub lilypond_print_page_head($)
{
    my $fh = shift;
    &$default_print_page_head($fh);
    print $fh "<div id=\"main\">\n";
}

# Print out the TOC in a <div> at the end of th page, which will be formatted as a
# sidebar mimicking a TOC frame
sub lilypond_print_page_foot($)
{
  my $fh = shift;
  print $fh "<!-- FOOTER -->\n\n";
  print $fh "<!-- end div#main here -->\n</div>\n\n";
  if ($web_manual) {
    # FIXME: This div and p#languages need to be in div#footer.
    #        Should we move this div to postprocess_html.py ?
    print $fh "<div id=\"verifier_texinfo\">\n";
    print $fh "<h3>Validation</h3>\n";
    # FIXME: inlined text substitution, move to ly_get_string as soon as another case is needed
    # this does the variable substitution ("quoting" in Perlish) after the localization
    $hosting_thanks =~ s/(\$\{\w+\})/$1/eeg;
    print $fh "<a href=\"https://validator.w3.org/check?uri=referer\">\n";
    print $fh "<img src=\"https://www.w3.org/Icons/valid-html401\"\n";
    print $fh "     alt=\"Valid HTML 4.01 Transitional\"\n";
    print $fh "     height=\"31\" width=\"88\"></a></p>\n";
    print $fh "</div>";
  }

  # Print the TOC frame after the contents (positioned correctly using CSS),
  # so that browsers with CSS turned off still show the contents first.
  lilypond_print_toc_div ($fh);

  # Close the page:
  print $fh "</body>\n</html>\n";
}





#############################################################################
###  NICER / MORE FLEXIBLE NAVIGATION PANELS
#############################################################################

sub get_navigation_button
{
    my $button = shift;

    my $text = $NAVIGATION_TEXT{$button};
    my $name = $Texi2HTML::NODE{$button};
    if ($name ne 'Top') {
        $name = $Texi2HTML::THIS_ELEMENT->{$button}->{'text_nonumber'};
    }
    if (($button eq 'Back') or ($button eq 'FastBack')) {
        $text = $text . $name . ' ';
    } elsif (($button eq 'Forward') or ($button eq 'FastForward')) {
        $text = ' ' . $name . $text;
    } elsif ($button eq 'Up') {
        $text = $text . ': ' . $name . ' ';
    }

    my $attributes = '';
    if ($BUTTONS_GOTO{$button}) {
        $attributes .= 'title="' . $BUTTONS_GOTO{$button} . '"';
    }
    if (defined ($BUTTONS_ACCESSKEY{$button}) and
        ($BUTTONS_ACCESSKEY{$button} ne '')) {
        $attributes .= ' accesskey="' . $BUTTONS_ACCESSKEY{$button} . '"';
    }
    if (defined ($BUTTONS_REL{$button}) and ($BUTTONS_REL{$button} ne '')) {
        $attributes .= ' rel="' . $BUTTONS_REL{$button} . '"';
    }

    return '[' . &$anchor ('', $Texi2HTML::HREF{$button}, $text, $attributes) . ']';
}

sub lilypond_print_navigation
{
    # No navigation buttons for web pages.
    if ($web_manual) {
        return "\n";
    }

    my $buttons = shift;
    # Compare the button reference with one of the expected values.
    my $chapter_buttons = $buttons == \@CHAPTER_BUTTONS;
    my $section_buttons = (
        ($buttons == \@SECTION_BUTTONS) or
        ($buttons == \@SECTION_FOOTER_BUTTONS) or
        ($buttons == \@NODE_FOOTER_BUTTONS));
    my $result = "<table class=\"nav_table\">\n";

    # First row:
    $result .= '<tr>';
    if ($chapter_buttons or $section_buttons) {
        $result .= '<td align="left">';
        $result .= get_navigation_button ('FastBack');
        $result .= '</td>';
    }
    $result .= '<td align="center">';
    $result .= get_navigation_button ('Top');
    $result .= get_navigation_button ('Contents');
    # Not all manuals have an index.
    if ($Texi2HTML::HREF{'Index'}) {
        $result .= get_navigation_button ('Index');
    }
    $result .= '</td>';
    if ($chapter_buttons or $section_buttons) {
        $result .= '<td align="right">';
        $result .= get_navigation_button ('FastForward');
        $result .= '</td>';
    }
    $result .= "</tr>\n";

    if ($chapter_buttons or $section_buttons) {
        # (Optional) second row:
        $result .= '<tr>';
        $result .= '<td align="left">';
        $result .= get_navigation_button ('Back');
        $result .= '</td>';
        $result .= '<td align="center">';
        $result .= get_navigation_button ('Up');
        $result .= '</td>';
        $result .= '<td align="right">';
        $result .= get_navigation_button ('Forward');
        $result .= '</td>';
        $result .= "</tr>\n";
    }
    $result .= "</table>\n";

    return $result;
}



#############################################################################
###  FOOTNOTE FORMATTING
#############################################################################

# Format footnotes in a nicer way: Instead of printing the number in a separate
# (nr) heading line, use the standard way of prepending <sup>nr</sup> immediately
# before the fn text.


# The following code is copied from texi2html's examples/makeinfo.init and
# should be updated when texi2html makes some changes there!

my $makekinfo_like_footnote_absolute_number = 0;

sub makeinfo_like_foot_line_and_ref($$$$$$$$)
{
    my $foot_num = shift;
    my $relative_num = shift;
    my $footid = shift;
    my $docid = shift;
    my $from_file = shift;
    my $footnote_file = shift;
    my $lines = shift;
    my $state = shift;

    $makekinfo_like_footnote_absolute_number++;

    # this is a bit obscure, this allows to add an anchor only if formatted
    # as part of the document.
    $docid = '' if ($state->{'outside_document'} or $state->{'multiple_pass'});

    if ($from_file eq $footnote_file)
    {
        $from_file = $footnote_file = '';
    }

    my $foot_anchor = "<sup>" .
	&$anchor($docid, "$footnote_file#$footid", $relative_num) . "</sup>";
    $foot_anchor = &$anchor($docid,
			    "$footnote_file#$footid",
			    "($relative_num)") if ($state->{'preformatted'});

#    unshift @$lines, "<li>";
#    push @$lines, "</li>\n";
    return ($lines, $foot_anchor);
}

sub makeinfo_like_foot_lines($)
{
    my $lines = shift;
    unshift @$lines, "<hr>\n<h4>$Texi2HTML::I18n::WORDS->{'Footnotes_Title'}</h4>\n";
#<ol type=\"1\">\n";
#    push @$lines, "</ol>";
    return $lines;
}

my %makekinfo_like_paragraph_in_footnote_nr;

sub makeinfo_like_paragraph ($$$$$$$$$$$$$)
{
    my $text = shift;
    my $align = shift;
    my $indent = shift;
    my $paragraph_command = shift;
    my $paragraph_command_formatted = shift;
    my $paragraph_number = shift;
    my $format = shift;
    my $item_nr = shift;
    my $enumerate_style = shift;
    my $number = shift;
    my $command_stack_at_end = shift;
    my $command_stack_at_begin = shift;
    my $state = shift;
#print STDERR "format: $format\n" if (defined($format));
#print STDERR "paragraph @$command_stack_at_end; @$command_stack_at_begin\n";
    $paragraph_command_formatted = '' if (!defined($paragraph_command_formatted) or
          exists($special_list_commands{$format}->{$paragraph_command}));
    return '' if ($text =~ /^\s*$/);
    foreach my $style(t2h_collect_styles($command_stack_at_begin))
    {
       $text = t2h_begin_style($style, $text);
    }
    foreach my $style(t2h_collect_styles($command_stack_at_end))
    {
       $text = t2h_end_style($style, $text);
    }
    if (defined($paragraph_number) and defined($$paragraph_number))
    {
         $$paragraph_number++;
         return $text  if (($format eq 'itemize' or $format eq 'enumerate') and
            ($$paragraph_number == 1));
    }
    # The cells of a table should not be wrapped in a <p> tag, so just return the text
    if (defined($command_stack_at_begin->[0]) and $command_stack_at_begin->[0] eq 'multitable')
    {
        return $text;
    }

    # Adjust all footnotes so that they look like good old makeinfo
    my $open = '<p';
    if ($align)
    {
        $open .= " align=\"$paragraph_style{$align}\"";
    }
    my $footnote_text = '';
    if (defined($command_stack_at_begin->[0]) and $command_stack_at_begin->[0] eq 'footnote')
    {
        my $state = $Texi2HTML::THISDOC{'state'};
        $makekinfo_like_paragraph_in_footnote_nr{$makekinfo_like_footnote_absolute_number}++;
        if ($makekinfo_like_paragraph_in_footnote_nr{$makekinfo_like_footnote_absolute_number} <= 1)
        {
           $open.=' class="footnote"';
           my $document_file = $state->{'footnote_document_file'};
           if ($document_file eq $state->{'footnote_footnote_file'})
           {
               $document_file = '';
           }
           my $docid = $state->{'footnote_place_id'};
           my $doc_state = $state->{'footnote_document_state'};
           $docid = '' if ($doc_state->{'outside_document'} or $doc_state->{'multiple_pass'});
           my $foot_label = &$anchor($state->{'footnote_footnote_id'},
                 $document_file . "#$state->{'footnote_place_id'}",
                 "$state->{'footnote_number_in_page'}");
           $footnote_text = "<small>[${foot_label}]</small> ";
        }
    }
    return $open.'>'.$footnote_text.$text.'</p>';
}


return 1;
