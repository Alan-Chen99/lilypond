\input texinfo @c -*- coding: utf-8; mode: texinfo; documentlanguage: fr -*-

@ignore
    Translation of GIT committish: 290cafa10a79f2a56f7a08c764e8fa1b49343292

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore

@c Translators: Jean-Charles Malahieude
@c Translation checkers: Jean Abou Samra

@setfilename lilypond-changes.info
@settitle LilyPond Changes

@include fr/macros.itexi

@ifhtml
@macro inputfileref{DIR,NAME}
@uref{../../\DIR\/collated-files.html#\NAME\,@file{\DIR\/\NAME\}}@c
@end macro
@macro usermanref{NAME}
@inforef{\NAME\,,../user/lilypond/lilypond}@c
@end macro
@end ifhtml

@ifnothtml
@macro inputfileref{DIR,NAME}
@file{\DIR\/\NAME\}@c
@end macro
@macro usermanref{NAME}
Voir le manuel d'utilisation, \NAME\
@end macro
@end ifnothtml

@macro textanchor{NAME}
@html
<a name="\NAME\"></a>
@end html
@end macro


@documentencoding UTF-8
@documentlanguage fr
@afourpaper

@macro manualIntro
Ce document recense les modifications et les nouvelles fonctionnalités
de LilyPond pour la version @version{} (depuis la 2.22).
@end macro

@lilyTitlePage{Nouveautés}

@iftex
@allowcodebreaks false
@end iftex

@ignore

HINTS
* add new items at the top
* only show verbatim input for syntax/input changes
* try to be as brief possible in those cases
* don't try to provide real-world examples, they often get too big,
which scares away people.
* Write complete sentences.
* only show user-visible changes.

@end ignore




@subheading Nouveautés en matière de notation musicale
@c VO New for musical notation


@subsubheading Améliorations de la représentation des hauteurs

@itemize
@item
La prise en charge d'altérations alternatives s'améliore. Grâce à la
propriété @code{alterationGlyphs} des contextes de niveau portée,
peuvent se définir globalement les glyphes à utiliser pour tous les
objets -- voir @ruser{Glyphes d'altération alternatifs}.

@lilypond[quote]
\layout {
  \context {
    \Staff
    alterationGlyphs =
      #'((-1/2 . "accidentals.flat.arrowdown")
         (0 . "accidentals.natural.arrowup")
         (1/2 . "accidentals.sharp.arrowup"))
  }
}

\new Voice \with {
  \consists Ambitus_engraver
}
{
  \key g \major
  ces''
  \set suggestAccidentals = ##t
  c''
  \unset suggestAccidentals
  \accidentalStyle teaching
  fis''
}
@end lilypond

@item
Dans le cadre de la fonte Emmentaler, les têtes de notes dont l'aspect
est identique et pour lesquelles la seule différence réside dans
l'orientation de leur hampe ont été consolidées en un glyphe unique. Par
exemple, les glyphes @code{noteheads@/.u2triangle} et
@code{noteheads@/.d2triangle} ont été remplacés par le seul glyphe
@code{noteheads@/.s2triangle}. Les paires de tête de note ayant un aspect
différent selon l'orientation de la hampe conservent leur distinction.

Par ailleurs, la propriété @code{stem-attachment} des objets graphiques
@code{NoteHead} renvoie le point d'attachement réel selon l'orientation
de hampe en lieu et place d'un hypothétique point d'attachement d'une
hampe ascendante.

@item
Les crochets d'octaviation peuvent s'appliquer à une seule voix plutôt
qu'à l'intégralité de la portée. Ceci demandait auparavant quelques
circonvolutions.

@example
\layout @{
  \context @{
    \Staff
    \remove Ottava_spanner_engraver
  @}
  \context @{
    \Voice
    \consists Ottava_spanner_engraver
  @}
@}
@end example

@lilypond[quote]
\layout {
  \context {
    \Staff
    \remove Ottava_spanner_engraver
  }
  \context {
    \Voice
    \consists Ottava_spanner_engraver
  }
}

{
  \clef bass
  << { <g d'>1~ q2 <c' e'> }
  \\
    {
      r2.
      \ottava -1
      <b,,, b,,>4 ~ |
      q2
      \ottava 0
      <c e>2
    }
  >>
}
@end lilypond

@end itemize


@subsubheading Améliorations en matière de rythme

@itemize
@item
Les numéros de mesure peuvent se présenter au centre de la mesure comme
il est d'usage dans les musiques de film.

@lilypond[verbatim,quote]
\layout {
  \context {
    \Score
    centerBarNumbers = ##t
    barNumberVisibility = #all-bar-numbers-visible
  }
}

<<
  { \bar "" \repeat unfold 3 { c'4 d' e' f' } }
  { \repeat unfold 3 { c'4 d' e' f' } }
>>
@end lilypond

@item
Les compteurs de mesures prennent en considération les mesures à
compter et les alternatives.

@lilypond[quote,line-width=15\cm]
\new Score \with {
  \consists Measure_counter_engraver
  \override MeasureCounter.font-encoding = #'latin1
  \override MeasureCounter.font-size = 1
  \override MeasureCounter.padding = 0.5
  \override MeasureCounter.font-series = #'bold
  alternativeNumberingStyle = #'numbers-with-letters
}
\new Voice \compressMMRests \relative {
  c'4-. 4-. 4-. 4-.
  r4 4-. 4-. r
  \startMeasureCount
  <<
    { R1 }
    \new CueVoice {
      \voiceTwo
      r4 c8( d) e-. g-.
    }
  >>
  R1*2
  \repeat volta 2 {
    c,8( d e g) c,( d e g)
  }
  \alternative {
    { c,8( d e g) c,( d e4) }
    { c8\< d e g c2\! R1*2 \bar "|." }
  }
  \stopMeasureCount
}
@end lilypond

@item
@code{\numericTimeSignature} et @code{\defaultTimeSignature}
s'appliquent désormais en même temps à toutes les portées -- plus
précisément à toutes les portées d'un même contexte @code{Timing} --
afin de correspondre au comportement de @code{\time}.

@item
Le nouveau @code{Mark_tracking_translator} prend le pas sur le
@code{Mark_engraver} en matière de décision quant à la création d'une
marque. Le @code{Mark_engraver} se charge toutefois de contrôler la mise
en forme et le positionnement vertical du repère.

Par défaut, des @code{Mark_engravers} dans de multiples contextes
créent une séquence commune de repères. Lorsque des séquences
indépendantes sont préférables, il faut utiliser plusieurs
@code{Mark_tracking_translator}.

@item
La commande @code{\enablePolymeter} agit comme un raccourci lors de la
saisie pour déplacer les graveurs selon le besoin et permettre d'avoir
différentes métriques en parallèle. Le code :

@quotation
@verbatim
\layout {
  \context {
    \Score
    \remove Timing_translator
    \remove Default_bar_line_engraver
  }
  \context {
    \Staff
    \consists Timing_translator
    \consists Default_bar_line_engraver
  }
}
@end verbatim
@end quotation

@noindent
peut ainsi s'abréger en :

@quotation
@verbatim
\layout {
  \enablePolymeter
}
@end verbatim
@end quotation

@item
L'instruction @code{\bar ","} crée une barre de mesure raccourcie.

@lilypond[quote]
\new Staff \with {
  \omit Clef
  \omit TimeSignature
} \fixed c' {
  \cadenzaOn
  e2 f g a g \bar "," f g f d e\breve
}
@end lilypond

@end itemize


@subsubheading Améliorations en matière d'expressivité

@itemize
@item
Les événements attachés à des notes, tels que nuances ou articulations,
peuvent être différés d'une durée arbitraire à l'aide de @code{\after}.
Ceci permet de simplifier de nombreuses situations qui jusqu'alors
demandaient de recourir à une polypĥonie et des silences invisibles.

@lilypond[verbatim,quote]
{
  \after 2 \turn g'2. a'4
  \after 2 \< b'1
  \after 2. \f c''
  <>\< \after 4 \> \after 2\! d''
}
@end lilypond

@item
Les terminaisons des soufflets peuvent désormais s'aligner sur la
gauche, au centre ou sur la droite des @emph{grobs} @code{NoteColumn} à
l'aide d'une dérogation à la propriété @code{endpoint-alignments}.

@lilypond[quote]
{
  c'2\< <c' d'>\! |
  \override Hairpin.endpoint-alignments = #`(,RIGHT . ,LEFT)
  c'2\< <c' d'>\! |
  \override Hairpin.endpoint-alignments = #`(,CENTER . ,CENTER)
  c'2\< <c' d'>\! |
}
@end lilypond

@item
La nouvelle commande @code{\vshape} se comporte comme @code{\shape}, à
ceci près qu'elle affiche les points de contrôle et le polygone qui les
enveloppe, afin de faciliter les ajustements.

@lilypond[verbatim,quote]
{ a1\vshape #'((0 . 0) (0 . 0.5) (0 . 0.9) (0 . 0.4))^( c'1) }
@end lilypond

@end itemize


@subsubheading Améliorations en matière de reprises

@itemize
@item
Les alternatives peuvent se placer au sein même du bloc de répétition.

@lilypond[verbatim,quote]
\repeat volta 3 { c'1 \alternative { d' e' } f' }
@end lilypond

@item
Les numéros d'alternative peuvent se définir à l'aide de la commande
@code{\volta}.

@lilypond[verbatim,quote]
\repeat volta 3 c'1 \alternative { \volta 1 d' \volta 2,3 e' }
@end lilypond

@item
La commande @code{\volta} suprime la musique lorsque la répétition est
expansée.

@item
La commande @code{\unfolded} ajoute la musique lorsque la répétition est
expansée.

@item
La nouvelle commande @code{\repeat segno} permet de gérer
automatiquement un certain nombre de formes @emph{da-capo} et
@emph{dal-segno}.

@lilypond[verbatim,quote]
music = \fixed c' {
  \repeat segno 2 {
    b1
  }
  \fine
}

\score { \music }
\score { \unfoldRepeats \music }
@end lilypond

@item
La nouvelle commande @code{\fine} insère une barre de mesure finale qui
interagit de façon optimale avec les barres de reprise. Placée à
l'intérieur d'une reprise, elle ajoute une instruction @emph{Fine} et
termine la musique lorsque les reprises sont expansées.

@lilypond[verbatim,quote]
music = \fixed c' {
  \repeat volta 2 {
    f1
    \volta 2 \fine
    b1
  }
}

\score { \music }
\score { \unfoldRepeats \music }
@end lilypond

@end itemize


@subsubheading Améliorations en matière de notation sur la portée

@itemize
@item
L'ajout du @code{Melody_engraver} à un contexte @code{Voice} prend
désormais en compte le sens de la mélodie pour orienter la hampe de la
note sur la ligne médiane. Il fallait auparavant apporter une dérogation
spécifique à la propriété @code{Stem.neutral-direction}.

@lilypond[verbatim,quote]
\new Voice \with {
  \consists Melody_engraver
}
\relative c'' {
  \autoBeamOff
  g8 b a e g b a g |
  c b d c b e d c |
}
@end lilypond

La propriété de contexte @code{suspendMelodyDecisions} permet de
désactiver temporairement ce comportement, tout comme le faisait
@code{\override Stem.neutral-direction = #DOWN}.

@item
L'instruction @code{\bar ""} n'est plus un préalable à l'affichage du
numéro de la première mesure. Il suffit désormais de régler la propriété
@code{barNumberVisibility} à @code{all-@/bar-@/numbers-@/visible} ou
l'un des autres réglages pour lesquels le premier numéro de mesure est
visible.

Notez bien qu'il s'agit d'un changement de comportement pour les
partitions dans lesquelles @code{barNumberVisibility} est réglé à
@code{all-@/bar-@/numbers-@/visible} ou équivalent et
@code{BarNumber@/.break-@/visibility} activé sans avoir de
@code{\bar ""}. Un numéro de mesure est désormais affiché au début. Il
s'agit bien du comportement attendu (@strong{tous} les numéros devraient
être visibles) mais, en raison d'une documentation probablement pas
assez explicite, certains utilisateurs ont opté pour ces réglages afin
d'afficher les numéros de mesure en cours de portée sauf pour la
première mesure. En pareil cas, il convient de tout simplement supprimer
la clause
@code{\set Score@/.barNumberVisibility = #all-@/bar-@/numbers-@/visible}
puisque @code{\overrideBarNumber@/.break-@/visibility = ##t} est le
réglage approprié et suffisant.

@end itemize


@subsubheading Améliorations en matière d'annotations éditoriales

@itemize
@item
Il est désormais possible de placer un accord entre parenthèses.
Toutefois, la taille de la fonte utilisée pour les parenthèses devra
être ajustée manuellement.

@lilypond[quote]
\new Voice {
  \tweak Parentheses.font-size -2 \parenthesize <a'' b''>2
  <<
    { \tweak Parentheses.font-size 0 \parenthesize <ces des> }
    { \parenthesize ees' }
    { \tweak Parentheses.font-size -2 \parenthesize <c'' e''> }
  >>
}
@end lilypond

@item
Les objets étendus ou bandeaux peuvent être mis entre parenthèses.

@lilypond[quote]
{
  c'\parenthesize\< d'2.\!
  \parenthesize R1
}
@end lilypond

@item
Une version « temporelle » de la commande @code{\parenthesize} est
disponible. Elle prend en considération le chemin vers un objet
graphique : @code{\parenthesize @var{NomGrob}} ou @code{\parenthesize
@var{ContextName}.@var{GrobName}}. Cette commande se comporte comme un
@code{\once \override}. Cette interface vient en complément de la forme
déjà disponible @code{\parenthesize @var{événement}}, de manière
identique à @code{\footnote}.

@lilypond[verbatim,quote]
{
  \parenthesize NoteHead
  c'1
  \parenthesize Staff.KeySignature
  \key g \major
  c'1
}
@end lilypond

@item
En matière de basse chiffrée, il est désormais possible de placer les
altérations entre crochets.

@lilypond[quote]
\figures {
  <7 [5 3[+]]> <5[!]> <[5!]>
}
@end lilypond

@item
La mise en forme de info-bulles est désormais modifiable.

@lilypond[quote]
\new Score \with {
  \consists Balloon_engraver
  \override SpacingSpanner.spacing-increment = 5
}
{
  \balloonLengthOn
  \balloonGrobText Rest #'(1 . 2) "rest"
  r4
  \once \override Score.BalloonText.Y-attachment = #CENTER
  \once \override Score.BalloonText.text-alignment-X = #CENTER
  \balloonGrobText Rest #'(1 . 3.5) "rest"
  r4
}
@end lilypond

@end itemize


@subsubheading Améliorations en matière de mise en forme du texte

@itemize
@item
La nouvelle commande de @emph{markup} @code{string-lines} permet de
couper une chaîne à un caractère donné. La coupure intervient par défaut
au saut de ligne, et les éventuels espaces sont ignorés. La liste
résultante de @emph{markups} peut faire l'objet d'une mise en forme
particulière. Cette fonctionnalité constitue un moyen tout à fait adapté
pour ajouter des couplets à une chanson.

@lilypond[quote]
\markup
  \column
  \string-lines
    "Twinkle, twinkle, little star,
     How I wonder what you are!
     Up above the world so high,
     Like a diamond in the sky.
     Twinkle, twinkle, little star,
     How I wonder what you are!"
@end lilypond

@item
La nouvelle commande @code{\section} insère une double barre qui
interagit de manière optimale avec les barres de reprise. Un passage
peut être nommé à l'aide de la commande @code{\sectionLabel}.

@lilypond[verbatim,quote,line-width=9\cm]
\fixed c' {
  f1
  \break
  \section
  \sectionLabel "Trio"
  \repeat volta 2 {
    b1
  }
}
@end lilypond

@item
La fonction @code{markup->string} convertit un @emph{markup} dans une
réprésentation approximative de chaîne de caractères. Ceci est utile
pour générer des métadonnées PDF ainsi que les paroles et repères en
MIDI. Il est donc possible de créer des commandes pour @emph{markups}
personnalisées afin de retraiter les chaînes converties par
@code{markup->string}, comme par exemple

@example
#(define-markup-command (upcase layout props arg) (string?)
   #:as-string (string-upcase arg)
   (interpret-markup layout props (string-upcase arg)))
@end example

@end itemize


@subheading Nouveautés en matière de notation spécialisée
@c VO New for specialist notation


@ignore
@subsubheading Améliorations pour la musique vocale

@itemize
@item
Un

@end itemize
@end ignore


@subsubheading Améliorations pour les cordes frettées ou non

@itemize
@item
Ajout des accordages pour banjo @code{banjo-double-c} et
@code{banjo-double-d}.

@item
Le nouvel objet graphique @code{FingerGlideSpanner} permet d'indiquer le
glissé d'un doigt sur une corde passant d'une position à une autre. Il
peut se présenter sous différentes formes selon le style adopté ; l'image
ci-dessous affiche les styles @code{line}, @code{stub-left},
@code{stub-right} et @code{stub-both}.

@lilypond[quote]
mus = {
  \set fingeringOrientations = #'(right)
  <a'\glide-1>2.
  \set fingeringOrientations = #'(left)
  <d'-1>4
}

\score {
  {
    <>^"line"
    \mus
    <>^"stub-left"
    \override FingerGlideSpanner.style = #'stub-left
    \mus
    <>^"stub-right"
    \override FingerGlideSpanner.style = #'stub-right
    \mus
    <>^"stub-both"
    \override FingerGlideSpanner.style = #'stub-both
    \mus
  }
}
@end lilypond
@noindent
D'autres styles sont disponibles : @code{dashed-line},
@code{dotted-line}, @code{zigzag}, @code{trill}, @code{bow} et
@code{none}.

@item
Le nouvel objet graphique @code{BendSpanner} permet, dans le cadre d'un
@code{TabStaff}, d'indiquer une désinance. En plus de l'apparence par
défaut sont disponibles les styles @code{'hold}, @code{'pre-bend} et
@code{'pre-bend-hold}.

@lilypond[quote]
mus = {
  d4\5\^ e\5\^ d2\5
  c'4\3\^ d'\3\bendHold \^ d'\3\^ c'\3
  \grace c'4\3\preBendHold \^ d'\3\bendHold \^ d'\3\^ c'2\3
  \grace c'4\3 \preBend \^ d'1\3
}

\score {
  \new StaffGroup
  <<
    \new Staff { \clef "G_8" \mus }
    \new TabVoice \mus
  >>
  \layout {
    \context {
      \Voice
      \omit StringNumber
    }
    \context {
      \TabVoice
      \consists Bend_spanner_engraver
    }
  }
}
@end lilypond

@end itemize


@subsubheading Améliorations pour la notation des percussions

@itemize
@item
Ajout du style de notation pour percussions @code{weinberg-drums-style}
basé sur les travaux de standardisation de Norman Weinberg.

@end itemize


@ignore
@subsubheading Améliorations pour la notation contemporaine

@itemize
@item
Un

@end itemize
@end ignore


@subsubheading Améliorations pour les musiques du monde

@itemize
@item
LilyPond prend désormais en charge la musique persane. Deux glyphes
d'altération ont été ajoutés à cet effet : @emph{sori} et @emph{koron}.

@lilypond[verbatim,quote,line-width=14.5\cm]
\include "persian.ly"

\relative c' {
  \key d \chahargah
  bk'8 a gs fo r g ak g |
  fs ek d c d ef16 d c4 |
}
@end lilypond

@end itemize


@subheading Nouveautés en matière d'entrée et sortie
@c VO New for input and output


@subsubheading Améliorations pour la structure

@itemize
@item
Une même définition d'objet graphique peut désormais s'utiliser pour
créer des @emph{grobs} de classe différente (@code{Item},
@code{Spanner}, @code{Paper_column}, @code{System}). Dans le cadre de
cette évolution, les types de @emph{grob} @code{FootnoteItem} et
@code{FootnoteSpanner} ont été rassemblés en un unique
type @code{Footnote}. De la même manière, @code{BalloonTextSpanner} et
@code{BalloonTextItem} ont été unifiés en @code{BalloonText}.

Lorsque la définition du @emph{grob} ne requiert pas de classe, les
graveurs doivent décider de la classe à utiliser pour créer le
@emph{grob}. Pour ceux qui créent leurs propres graveurs en Scheme, cela
signifie qu'il faudra utiliser soit @code{ly:@/engraver-@/make-@/item},
soit @code{ly:@/engraver-@/make-@/spanner}. La fonction utilitaire
@code{ly:@/engraver-@/make-@/sticky} permet de prendre en charge le cas
des @emph{sticky grobs} tels que notes de bas de page et infobulles.
Elle crée un @emph{grob} de la même classe qu'un autre et gère la
parenté et les attachements.

@end itemize


@subsubheading Améliorations pour les titrages et entêtes

@itemize
@item
La syntaxe permettant de gérer des conditions pour les @emph{markups} a
gagné en flexibilité et en simplicité. Elle utilise les nouvelles
commandes de @emph{markup} @code{\if} et @code{\unless}. Voici quelques
uns des changements apportés :

@multitable {@code{\on-the-fly #not-part-first-page @dots{}}} {@code{\unless \on-first-page-of-part @dots{}}}
@headitem Syntaxe version 2.22 @tab Syntaxe version 2.24
@item @code{\on-the-fly #first-page @dots{}}
@tab @code{\if \on-first-page @dots{}}
@item @code{\on-the-fly #not-part-first-page @dots{}}
@tab @code{\unless \on-first-page-of-part @dots{}}
@item @code{\on-the-fly #(on-page @var{n}) @dots{}}
@tab @code{\if \on-page #@var{n} @dots{}}
@end multitable

@end itemize


@ignore
@subsubheading Améliorations pour les fichiers sources

@itemize
@item
Un

@end itemize
@end ignore


@subsubheading Améliorations pour les fichiers résultants

@itemize
@item
@code{set-default-paper-size} et @code{set-paper-size} acceptent
désormais des tailles de papier personnalisées.

@example
#(set-default-paper-size '(cons (* 100 mm) (* 50 mm)))
@end example

@item
@command{lilypond-book} prend en charge deux nouvelles options pour le
traitement des extraits : @option{paper-width} et @option{paper-height}
permettent de déterminer une taille particulière de papier.

@item
La valeur par défaut de l'option @code{aux-files} est désormais fixée
à @code{#f}. Lorsque LilyPond est lancé avec l'argument
@code{-dbackend=eps} et que sont nécessaires les fichiers @file{.tex}
et @file{.texi}, il faut désormais specifier explicitement l'option
@code{-daux-files}. Les formats pour les images @code{lilypond-book}
peuvent se définir séparément selon qu'il s'agit de la page (donc une
sortie PNG pour du format HTML) ou des images indépendantes par système
(pour des formats imprimables EPS ou PDF) à l'aide respectivement des
sous-options @code{-dtall-page-formats} et
@code{-dseparate-page-formats}.

@end itemize

@subsubheading Améliorations pour le MIDI

@itemize
@item
Le nouveau @code{Mark_performer} crée des événements MIDI à l'instar du
@code{Mark_engraver} pour les sorties imprimables.

@end itemize

@ignore
@subsubheading Améliorations en matière d'extraction de la musique

@itemize
@item
La

@end itemize
@end ignore


@ignore
@subheading Nouveautés en matière d'espacements
@c VO New for spacing issues


@subsubheading Améliorations pour les sauts de page

@itemize
@item
Un

@end itemize
@end ignore


@ignore
@subheading Nouveautés en matière de modification des réglages par défaut
@c VO New for changing defaults

@itemize
@item
Un

@end itemize
@end ignore


@subheading Nouveautés en matière d'interfaces et fonctions internes
@c VO New for Internal interfaces and functions

@itemize
@item
Le script @command{lilypond-book} autorise désormais l'utilisation
d'accolades dans les arguments des commandes @code{\lilypond} (pour
@LaTeX{}) et @code{@@lilypond} (pour Texinfo).

@item
@command{lilypond-book} ajoute désormais le répertoire courant comme
dernière entrée pour la recherche des fichiers inclus, au lieu de le
placer en premier dans la liste des chemins spécifiés. Ainsi, les
fichiers situés dans les dossiers d'inclusion prennent le pas sur
ceux du même nom dans le répertoire courant.  L'effet ne sera visible
que dans le cas où existent des fichiers du même nom de part et d'autre.

@item
@command{lilypond-book} prend en charge la nouvelle option
@option{inline} pour le traitement d'extraits musicaux. Ceci permet de
faire apparaître des bribes de partition, comme
@lilypond[inline,staffsize=11]{
  { \time 2/4 r8 g'[ g' g'] | es'2 }
}
au sein même d'un paragraphe de texte.

@item
Les traducteurs définis en Scheme et utilisables à la fois dans le cadre
d'un @samp{\layout} et d'un @samp{\midi} peuvent désormais être créés à
l'aide de @code{make-translator}. Les exécutants définis en Scheme, qui
ne peuvent s'utiliser de dans un @samp{\midi} se créent à l'aide de
@code{make-performer}. Ces macros fontionnent tout comme la macro
préexistante @code{make-engraver} qui permet de créer un graveur,
uniquement utilisable dans un @samp{\layout}.

@item
Les nouvelles propriétés @code{show-horizontal-skylines} et
@code{show-vertical-skylines} permettent d'afficher les lignes d'horizon
d'un objet. Ces propriétés sont beaucoup plus flexibles que d'utiliser
l'option @code{debug-skylines} dans la mesure où elles sont
opérationnelles avec tous les objets graphiques. Bien que prévu à
l'origine pour le débogage de LilyPond, ceci s'avère fort utile lorsque
l'on tente de comprendre les décisions en matière d'espacement ou la
modification de stencils en Scheme.

@lilypond[quote]
#(set-global-staff-size 40)

{
  \override Staff.Clef.show-vertical-skylines = ##t
  \override Accidental.show-horizontal-skylines = ##t
  cis'
}
@end lilypond

@end itemize


@ifhtml
Pour des annonces plus anciennes, rendez-vouz aux pages
@uref{https://lilypond.org/doc/v2.22/Documentation/changes/},
@uref{https://lilypond.org/doc/v2.20/Documentation/changes/},
ou @uref{../,remontez} à l'index de la documentation.


@end ifhtml

@bye
