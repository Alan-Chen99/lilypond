@node Administrative policies
@chapter Administrative policies

This chapter discusses miscellaneous administrative issues which
don't fit anywhere else.

@menu
* Meta-policy for this document::
* Environment variables::
* Meisters::
* Unsorted policies::
@end menu

@node Meta-policy for this document
@section Meta-policy for this document

The Contributor's Guide as a whole is still a work in progress,
but some chapters are much more complete than others.  Chapters
which are @qq{almost finished} should not have major changes
without a discussion on @w{@code{-devel}}; in other chapters, a
disorganized @qq{wiki-style dump} of information is encouraged.

Do not change (other than spelling mistakes) without discussion:

@itemize

@item
@ref{Introduction to contributing}

@item
@ref{Working with source code}

@end itemize

Please dump info in an appropriate @@section within these manuals,
but discuss any large-scale reorganization:

@itemize

@item
@ref{Compiling}

@item
@ref{Documentation work}

@item
@ref{Issues}

@item
@ref{Regression tests}

@item
@ref{Programming work}


@end itemize

Totally disorganized; do whatever the mao you want:

@itemize

@item
@ref{Website work}

@item
@ref{LSR work}

@item
@ref{Release work}

@item
@ref{Administrative policies}

@end itemize


@node Environment variables
@section Environment variables

Some maintenance scripts and instructions in this guide rely on
the following environment variables.  They should be predefined in
LilyDev distribution (see @ref{LilyDev}); if you set up your own
development environment, you can set them by appending these settings to
your @file{~/.bashrc} (or whatever defines your default environment
variables for the user account for LilyPond development), then logging
out and in (adapt directories to your setup):

@example
LILYPOND_GIT=~/lilypond-git
export LILYPOND_GIT
LILYPOND_BUILD_DIR=~/lilypond-git/build
export LILYPOND_BUILD_DIR
@end example

The standard build and install procedure (with @code{autogen.sh},
@code{configure}, @code{make}, @code{make install}, @code{make doc}
@dots{}) does not rely on them.

In addition, for working on the website, @code{LILYPOND_WEB_MEDIA_GIT}
should be set to the repository lilypond-extra, see
@ref{lilypond-extra}.


@node Meisters
@section Meisters

We have four primary jobs to help organize all our contributors:

@unnumberedsubsec The Bug Meister

The Bug Meister's responsibilities are:

@itemize

@item
To organize the individual Bug Squad volunteers, making sure that
each member is aware of their responsibilities.  See
@ref{The Bug Squad}.

@item
To train new Bug Squad volunteers in the Issue Tracker process.  See
@ref{Issues}.

@item
To have the final say on our policies for Issues and their
classification.  See @ref{Issue classification}.

@end itemize

Current Bug Meister: Colin Hall @email{bug-lilypond@@gnu.org}


@unnumberedsubsec The Doc Meister

The Doc Meister's responsibilities are:

@itemize

@item
To train new volunteers in our Documentation style and policy,
including organizing LilyPond Snippet Repository (LSR) work.

@item
To organize the individual volunteers -- who does what on which job --
and to check that everything is running smoothly.

@item
To have final say on any Documentation policy.  See
@ref{Documentation policy}.

@end itemize

Current Doc Meister: None


@unnumberedsubsec The Patch Meister

The Patch Meister's responsibilities are:

@itemize

@item
To keep track of all patches submitted for testing and review.  This
includes scanning the bug and dev email lists looking for any patches
submitted by @q{random} contributors and advising them on how to submit
a patch for testing and review.  See @ref{Lifecycle of a merge request}.

@item
Updates all Issue statuses for all patches that are currently in the
testing and review process periodically -- currently every 3 - 4 days.
See @ref{Patch handling}.

@end itemize

@warning{The Patch Meister's role is a purely administrative one and no
programming skill or judgement is assumed or required.}

Currently: James Lowe @email{pkx@@gnu.org}


@unnumberedsubsec The Translation Meister

The Translation Meister's responsibilities are:

@itemize

@item
To train new documentation translators in the translation process.  See
@ref{Translating the documentation}.

@item
To update the translation priority list and handle the merging of the
translation branches (in both directions).

@item
To have final say on any Translation management policies.  See
@ref{Translating the documentation}.

@end itemize

Currently: Francisco Vila @email{translations@@lilynet.net}



@node Unsorted policies
@section Unsorted policies

@subsubheading Language-specific mailing lists

A translator can ask for an official lilypond-xy mailing list once
they've finished all @qq{priority 1} translation items.

@subsubheading Performing yearly copyright update (@qq{grand-replace})

At the start of each year, copyright notices for all source files
should be refreshed by running the following command from the top of
the source tree:

@example
make grand-replace
@end example

Internally, this invokes the script @file{scripts/build/grand-replace.py},
which performs a regular expression substitution for old-year -> new-year
wherever it finds a valid copyright notice.

Note that snapshots of third party files such as @file{texinfo.tex} should
not be included in the automatic update; @file{grand-replace.py} ignores these
files if they are listed in the variable @code{copied_files}.


@subsubheading Push git access

Git access is given out when a contributor has a significant
record of patches being accepted without problems.  If existing
developers are tired of pushing patches for a contributor, we'll
discuss giving them push access.  Unsolicited requests from
contributors for access will almost always be turned down.
