\input texinfo @c -*- coding: utf-8; mode: texinfo; -*-
@setfilename lilypond-changes.info
@settitle LilyPond Changes

@include en/macros.itexi

@ifhtml
@macro inputfileref{DIR,NAME}
@uref{../../\DIR\/collated-files.html#\NAME\,@file{\DIR\/\NAME\}}@c
@end macro
@macro usermanref{NAME}
@inforef{\NAME\,,../user/lilypond/lilypond}@c
@end macro
@end ifhtml

@ifnothtml
@macro inputfileref{DIR,NAME}
@file{\DIR\/\NAME\}@c
@end macro
@macro usermanref{NAME}
See user manual, \NAME\
@end macro
@end ifnothtml

@macro textanchor{NAME}
@html
<a name="\NAME\"></a>
@end html
@end macro


@documentencoding UTF-8
@documentlanguage en
@afourpaper

@macro manualIntro
This document lists changes and new features
in LilyPond version @version{} since 2.22.
@end macro

@lilyTitlePage{Changes}

@iftex
@allowcodebreaks false
@end iftex

@itemize

@ignore

HINTS

* add new items at the top

* only show verbatim input for syntax/input changes

* try to be as brief possible in those cases

* don't try to provide real-world examples, they often get too big,
which scares away people.

* Write complete sentences.

* only show user-visible changes.

@end ignore

@item
The default of the @code{aux-files} program option changed to
@code{#f}. If you are calling LilyPond with the
@code{-dbackend=eps} argument and need the auxiliary @file{.tex}
and @file{.texi} files, you now have to specify @code{-daux-files}
explicitly. The formats for @code{lilypond-book} images can be set
separately for the tall page image (typically PNG for HTML output)
and per-system images (typically, EPS or PDF for printed output)
with the @code{-d} sub-options @code{-dtall-page-formats} and
@code{-dseparate-page-formats} respectively.


@item
Events attached to notes (e.g., dynamics or articulations) can be
delayed by an arbitrary duration using @code{\after}.  This simplifies
many situations that previously required the use of explicit polyphony
and spacer rests.

@lilypond[verbatim,quote]
{
  \after 2 \turn g'2. a'4
  \after 2 \< b'1
  \after 2. \f c''
  <>\< \after 4 \> \after 2\! d''
}
@end lilypond

@item
@command{lilypond-book} supports two new music fragment options
@option{paper-width} and @option{paper-height} to set a custom paper size.

@item
@code{set-default-paper-size} and @code{set-paper-size} now accept
a custom paper size.

@example
#(set-default-paper-size '(cons (* 100 mm) (* 50 mm)))
@end example

@item
Scheme-defined translators usable in both @samp{\layout} and
@samp{\midi} can now be created with @code{make-translator}.
Scheme-defined performers usable only in @samp{\midi} can now be
created with @code{make-performer}.  Those macros work strictly like
the previously existing macro @code{make-engraver} for creating
engravers only usable in @samp{\layout}.

@item 
The syntax for conditions in markups was made more flexible and
user-friendly.  It uses the new markup commands @code{\if} and
@code{\unless}.  Here are example replacements:

@multitable {@code{\on-the-fly #not-first-page @dots{}}} {@code{\unless \on-first-page-of-part @dots{}}}
@headitem 2.22 syntax @tab 2.24 syntax
@item @code{\on-the-fly #first-page @dots{}}
@tab @code{\if \on-first-page @code{} @dots{}}
@item @code{\on-the-fly #not-part-first-page @dots{}}
@tab @code{\unless \on-first-page-of-part @dots{}}
@item @code{\on-the-fly #(on-page @var{n}) @dots{}}
@tab @code{\if \on-page #@var{n} @dots{}}
@end multitable

@item
In figured bass, brackets can now also be added around accidentals.

@lilypond
\figures {
  <7 [5 3[+]]> <5[!]> <[5!]>
}
@end lilypond

@item
@code{\numericTimeSignature} and @code{\defaultTimeSignature} now act on
all staves at once (more precisely, on all staves in the same @code{Timing}
context), thus matching the behavior of @code{\time}.

@item
Parenthesizing chords is supported.  Currently, the font size of the
parentheses has to be adjusted manually.

@lilypond
\new Voice {
  \tweak Parentheses.font-size -2 \parenthesize <a'' b''>2
  <<
    { \tweak Parentheses.font-size 0 \parenthesize <ces des> }
    { \parenthesize ees' }
    { \tweak Parentheses.font-size -2 \parenthesize <c'' e''> }
  >>
}
@end lilypond

@item
Parenthesizing spanners is supported.

@lilypond
{
  c'\parenthesize\< d'2.\!
  \parenthesize R1
}
@end lilypond

@item
A @qq{time-based} version of the @code{\parenthesize} command was
added.  It takes a grob path: @code{\parenthesize @var{GrobName}}
or @code{\parenthesize @var{ContextName}.@var{GrobName}}.  It acts
like a @code{\once \override}.  This interface complements the
already existing form @code{\parenthesize @var{event}}, in a fashion
similar to @code{\footnote}.

@lilypond[verbatim,quote]
{
  \parenthesize NoteHead
  c'1
  \parenthesize Staff.KeySignature
  \key g \major
  c'1
}
@end lilypond

@item
The same grob definition can now be used to create grobs of
different classes (@code{Item}, @code{Spanner}, @code{Paper_column},
@code{System}).  As part of this change, the grob types
@code{FootnoteItem} and @code{FootnoteSpanner} were consolidated
into a single type @code{Footnote}.  Similarly, @code{BalloonTextSpanner}
and @code{BalloonTextItem} are unified into @code{BalloonText}.

When the grob definition does not mandate a class, engravers should
choose what class to create a grob with.  For authors of Scheme
engravers, this means using either @code{ly:engraver-make-item} or
@code{ly:engraver-make-spanner}.  The utility function
@code{ly:engraver-make-sticky} is provided to support the
frequent case of @emph{sticky} grobs, such as footnotes and balloons.
It creates a grob with the same class as another grob and
administrates parents and bounds.

@item
The new command @code{\vshape} is like @code{\shape}, but also shows
the control points and polygon for easier tweaking.

@lilypond[verbatim,quote]
{ a1\vshape #'((0 . 0) (0 . 0.5) (0 . 0.9) (0 . 0.4))^( c'1) }
@end lilypond

@item
Support for alternate accidentals was improved.  Through the
@code{alterationGlyphs} property of staff-like contexts,
accidental glyphs may be set for all grobs at once
(refer to @ruser{Alternate accidental glyphs}).

@lilypond
% Avoid unfortunate cropping of the arrow-sharp glyphâ€¦
\markup \vspace #0.5

\layout {
  \context {
    \Staff
    alterationGlyphs =
      #'((-1/2 . "accidentals.flat.arrowdown")
         (0 . "accidentals.natural.arrowup")
         (1/2 . "accidentals.sharp.arrowup"))
  }
}

\new Voice \with {
  \consists Ambitus_engraver
}
{
  \key g \major
  ces''
  \set suggestAccidentals = ##t
  c''
  \unset suggestAccidentals
  \accidentalStyle teaching
  fis''
}
@end lilypond

@item
Ottava brackets may apply to a single voice instead of the entire
staff.  This used to require workarounds.

@example
\layout @{
  \context @{
    \Staff
    \remove Ottava_spanner_engraver
  @}
  \context @{
    \Voice
    \consists Ottava_spanner_engraver
  @}
@}
@end example

@lilypond
\layout {
  \context {
    \Staff
    \remove Ottava_spanner_engraver
  }
  \context {
    \Voice
    \consists Ottava_spanner_engraver
  }
}

{
  \clef bass
  << { <g d'>1~ q2 <c' e'> }
  \\
    {
      r2.
      \ottava -1
      <b,,, b,,>4 ~ |
      q2
      \ottava 0
      <c e>2
    }
  >>
}
@end lilypond

@item
Measure counts now take compressed multi-measure rests and
alternatives into account.

@lilypond
\new Score \with {
  \consists Measure_counter_engraver
  \override MeasureCounter.font-encoding = #'latin1
  \override MeasureCounter.font-size = 1
  \override MeasureCounter.padding = 0.5
  \override MeasureCounter.font-series = #'bold
  alternativeNumberingStyle = #'numbers-with-letters
}
\new Voice \compressMMRests \relative {
  c'4-. 4-. 4-. 4-.
  r4 4-. 4-. r
  \startMeasureCount
  <<
    { R1 }
    \new CueVoice {
      \voiceTwo
      r4 c8( d) e-. g-.
    }
  >>
  R1*2
  \repeat volta 2 {
    c,8( d e g) c,( d e g)
  }
  \alternative {
    { c,8( d e g) c,( d e4) }
    { c8\< d e g c2\! R1*2 \bar "|." }
  }
  \stopMeasureCount
}
@end lilypond

@item
The string tunings @code{banjo-double-c} and @code{banjo-double-d}
were added.

@item
@command{lilypond-book} now appends the current directory as the last
entry to search for included files, instead of prepending it to the
list of specified include paths.  This allows include directories to
shadow files from the current directory, and will only be noticed if
there are files with the same name in both.

@item
@command{lilypond-book} supports a new snippet option @option{inline} for
inline music, that is, music snippets like
@lilypond[inline,staffsize=11]{
  { \time 2/4 r8 g'[ g' g'] | es'2 }
}
that appear within a paragraph of text.

@item
Bar numbers may be centered in their measure, as is common in film scores.

@lilypond[verbatim,quote]
\layout {
  \context {
    \Score
    centerBarNumbers = ##t
    barNumberVisibility = #all-bar-numbers-visible
  }
}

<<
  { \bar "" \repeat unfold 3 { c'4 d' e' f' } }
  { \repeat unfold 3 { c'4 d' e' f' } }
>>
@end lilypond

@item
Adding the @code{Melody_engraver} to the @code{Voice} context now works
out of the box to change the stem direction of the middle note according
to the melody.  Previously, this required an additional override to
@code{Stem.neutral-direction}.

@lilypond[verbatim]
\new Voice \with {
  \consists Melody_engraver
}
\relative c'' {
  \autoBeamOff
  g8 b a e g b a g |
  c b d c b e d c |
}
@end lilypond

The @code{suspendMelodyDecisions} context property may be used
to turn off this behavior temporarily, as
@code{\override Stem.neutral-direction = #DOWN} used to do.

@item
In the Emmentaler font, identical-looking noteheads whose only difference was
stem direction have been consolidated into a single glyph.  For instance,
the glyphs @code{noteheads.u2triangle} and @code{noteheads.d2triangle} have
been replaced by a single glyph, @code{noteheads.s2triangle}.  Notehead pairs
that look visually different depending on the direction remain distinct.

In addition, the @code{stem-attachment} property of @code{NoteHead} grobs now
returns its actual, direction-dependent stem attachment point instead of a
hypothetical upwards-stem attachment point.

@item
Repeat alternatives may appear in places other than the end of the
repeated section.

@lilypond[verbatim,quote]
\repeat volta 3 { c'1 \alternative { d' e' } f' }
@end lilypond

@item
The volta numbers for repeat alternatives may be set with the
@code{\volta} command.

@lilypond[verbatim,quote]
\repeat volta 3 c'1 \alternative { \volta 1 d' \volta 2,3 e' }
@end lilypond

@item
The @code{\volta} command removes music when a repeat is unfolded.

@item
The @code{\unfolded} command adds music when a repeat is unfolded.

@item
The ends of hairpins may now be aligned to the @code{LEFT}, @code{CENTER}
or @code{RIGHT} of @code{NoteColumn} grobs by overriding the property
@code{endpoint-alignments}.

@lilypond[quote]
{
  c'2\< <c' d'>\! |
  \override Hairpin.endpoint-alignments = #`(,RIGHT . ,LEFT)
  c'2\< <c' d'>\! |
  \override Hairpin.endpoint-alignments = #`(,CENTER . ,CENTER)
  c'2\< <c' d'>\! |
}
@end lilypond

@item
The @command{lilypond-book} script now allows braces in the argument of
the commands @code{\lilypond} (for LaTeX) and @code{@@lilypond} (for
Texinfo).

@item
With the new markup list command @code{string-lines} it is now possible to
split a string at a given character.  The default is to split at line break.
Surrounding white space gets dropped.  The resulting list of markups may be
further formatted.
This is a very convenient way of entering additional stanzas for songs.

@lilypond[quote]
\markup
  \column
  \string-lines
    "Twinkle, twinkle, little star,
     How I wonder what you are!
     Up above the world so high,
     Like a diamond in the sky.
     Twinkle, twinkle, little star,
     How I wonder what you are!"
@end lilypond

@item
Color transparency is supported when generating Postscript and
PDF files.  To use this new feature, it is necessary to use
Ghostscript version 9.53 or later.

@item
A new grob @code{FingerGlideSpanner} is now available, indicating a finger
gliding on a string from one to another position.
Several appearances are possible, depending on the setting of @code{style}.
Shown in the image are @code{line}, @code{stub-left}, @code{stub-right} and
@code{stub-both}.

@lilypond[quote]
mus = {
  \set fingeringOrientations = #'(right)
  <a'\glide-1>2.
  \set fingeringOrientations = #'(left)
  <d'-1>4
}

\score {
  {
    <>^"line"
    \mus
    <>^"stub-left"
    \override FingerGlideSpanner.style = #'stub-left
    \mus
    <>^"stub-right"
    \override FingerGlideSpanner.style = #'stub-right
    \mus
    <>^"stub-both"
    \override FingerGlideSpanner.style = #'stub-both
    \mus
  }
}
@end lilypond

Also possible is @code{dashed-line}, @code{dotted-line}, @code{zigzag},
@code{trill}, @code{bow} and @code{none}.


@item
A new grob @code{BendSpanner} is now available for @code{TabStaff}, indicating
a bent string.
Apart from the default three styles are possible: @code{'hold},
@code{'pre-bend} and @code{'pre-bend-hold}.

@lilypond[quote]
mus = {
  d4\5\^ e\5\^ d2\5
  c'4\3\^ d'\3\bendHold \^ d'\3\^ c'\3
  \grace c'4\3\preBendHold \^ d'\3\bendHold \^ d'\3\^ c'2\3
  \grace c'4\3 \preBend \^ d'1\3
}

\score {
  \new StaffGroup
  <<
    \new Staff { \clef "G_8" \mus }
    \new TabVoice \mus
  >>
  \layout {
    \context {
      \Voice
      \omit StringNumber
    }
    \context {
      \TabVoice
      \consists "Bend_spanner_engraver"
    }
  }
}
@end lilypond

@item
A new grob callback function @code{break-alignment-list} is now available for
returning different values depending on a grob's break direction.  As an
example, use it to provide different alignments of a grob depending on whether
it is positioned at the beginning, the middle, or the end of a line.

@lilypond[quote]
\score {
  { \bar "" \repeat unfold 8 c' }
  \layout {
    \context {
      \Score
      barNumberVisibility = #all-bar-numbers-visible
      \override BarNumber.break-visibility = #'#(#t #t #t)
      \override BarNumber.self-alignment-X =
        #(break-alignment-list CENTER LEFT CENTER)
    }
  }
}
@end lilypond

@item
The alignment of bar numbers appearing in the middle or end of a system
has been changed to align them on their left edge.  This is in keeping with the
advice of Elaine Gould (@cite{Behind Bars}, p.@tie{}237), and was mostly the
consensus reached in a discussion of the issue by developers.  The alignment of
bars at the beginning of a system remains unchanged.

@end itemize

@ifhtml
For older news, go to
@uref{https://lilypond.org/doc/v2.22/Documentation/changes/},
@uref{https://lilypond.org/doc/v2.20/Documentation/changes/},
or @uref{../,go back} to the Documentation index.


@end ifhtml

@bye
