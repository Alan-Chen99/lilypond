\input texinfo @c -*- coding: utf-8; mode: texinfo; documentlanguage: es -*-
@ignore
    Translation of GIT committish: 53ab418e0bb8f272082db295b38a1dbb2ccfca65

    When revising a translation, copy the HEAD committish of the
    version that you are working on.  For details, see the Contributors'
    Guide, node Updating translation committishes..
@end ignore
@setfilename lilypond-changes.info
@settitle Registro de cambios de LilyPond

@include macros.itexi

@ifhtml
@macro inputfileref{DIR,NAME}
@uref{../../\DIR\/collated-files.html#\NAME\,@file{\DIR\/\NAME\}}@c
@end macro
@macro usermanref{NAME}
@inforef{\NAME\,,../user/lilypond/lilypond}@c
@end macro
@end ifhtml

@ifnothtml
@macro inputfileref{DIR,NAME}
@file{\DIR\/\NAME\}@c
@end macro
@macro usermanref{NAME}
Véase el manual del usuario, \NAME\
@end macro
@end ifnothtml

@macro textanchor{NAME}
@html
<a name="\NAME\"></a>
@end html
@end macro


@documentencoding UTF-8
@documentlanguage es
@afourpaper
@c Translators: Francisco Vila

@finalout

@node Top
@top Funcionalidades nuevas de la versión 2.16 desde la 2.14

@allowcodebreaks false

@itemize

@ignore

HINTS

* add new items at the top

* only show verbatim input for syntax/input changes

* try to be as brief possible in those cases

* don't try to provide real-world examples, they often get too big,
which scares away people.

* Write complete sentences.

* only show user-visible changes.

@end ignore

@item
Se puede elegir entre dos métodos de numeración de compases, en
especial para cuando se emplean repeticiones:

@lilypond[fragment,quote,relative=1,noragged-right]
\relative c'{
  \set Score.alternativeNumberingStyle = #'numbers
  \repeat volta 3 { c4 d e f | }
    \alternative {
      { c4 d e f | c2 d \break }
      { f4 g a b | f4 g a b | f2 a | \break }
      { c4 d e f | c2 d }
    }
  c1 \break
  \set Score.alternativeNumberingStyle = #'numbers-with-letters
  \repeat volta 3 { c,4 d e f | }
    \alternative {
      { c4 d e f | c2 d \break }
      { f4 g a b | f4 g a b | f2 a | \break }
      { c4 d e f | c2 d }
    }
  c1
}
@end lilypond

@item
Las expresiones de Scheme dentro de fragmentos de código de LilyPond
incrustados (@code{#@{@dots{}#@}}) se ejecutan ahora dentro de la
cerradura léxica del código de Scheme circundante.  El símbolo
@code{$} ya no es especial dentro del código de LilyPond incrustado.
Se puede utilizar de forma incondicional dentro de código de LilyPond
para su evaluación inmediata, de forma parecida a la forma en que se
utilizaba anteriormente @code{ly:export}.  Se ha suprimido
@code{ly:export}.  Como consecuencia, ahora @code{#} está libre para
diferir la evaluación de su argumento hasta que el analizador
sintáctico reduzca efectivamente la expresión contenida, reduciendo
significativamente el potencial de la evaluación prematura.

@item
Se ha mejorado el soporte de acordes de tipo jazz: se reconocen los
acordes lidios y alterados; ahora se tratan los separadores entre
modificadores de acorde de forma independiente de los separadores
entre acordes invertidos y sus notas de bajo (y por omisión, la barra
inclinada se usa ahora solamente para el último tipo de separador);
las notas adicionales ya no van prefijadas por "add" de forma
predeterminada; y la "m" en los acordes menores se puede personalizar.
Consulte @ruser{Nombres de acorde personalizados} para más
información.

@item
Se ha cambiado el nombre de la instrucción @code{\markuplines} por
@code{\markuplist} para conseguir una mejor correspondencia con su
semántica y con la nomenclatura generarl de LilyPond.

@item
Se ha simplificado considerablemente la interfaz para especificar
afinaciones en las tablaturas.

@item
Las barras ahora pueden preservar la inclinación por encima de los
saltos de línea.
@lilypond[fragment,quote,relative=2]
\override Beam #'breakable = ##t
a8[ b c d e f g \bar "" \break f e d c b a]
\once \override Beam #'positions = #beam::align-with-broken-parts
a8[ b c d e f g \bar "" \break f e d c b a]
\once \override Beam #'positions = #beam::slope-like-broken-parts
a8[ b c d e f g \bar "" \break f e d c b a]
@end lilypond
Para hacerlo, se han hecho obsoletas varias funciones de "callback".
@itemize
@item @code{ly:beam::calc-least-squares-positions}
@item @code{ly:beam::slope-damping}
@item @code{ly:beam::shift-region-to-valid}
@end itemize
Además, @code{ly:beam::quanting} ahora acepta un argumento adicional
para ayudar a los cálculos sobre los cambios de línea.  Todas estas
funciones se llaman automáticamente cuando se ajusta el parámetro
@code{positions}.

@item
En los argumentos de función, la música, los elementos de marcado y
las expresiones de Scheme (así como algunas otras entidades
sintácticas) se han hecho mayormente intercambiables y se diferencian
solamente mediante la evaluación del predicado respectivo.

@item
Ahora se pueden definir las funciones musicales (y sus parientes
cercanos) con argumentos opcionales.

@item
Para definir instrucciones que se ejecutan solamente por sus efectos
secundarios, ahora está disponible @code{define-void-function}.

@item
Hay una instrucción nueva @code{define-event-function} en analogía con
@code{define-music-function} que se puede usar para definir funciones
musicales que actúan como eventos sin que se requiera un especificador
de dirección como (@code{-}, @code{^} o @code{_}) antes de ellos.

@lilypond[quote,verbatim,ragged-right]
dyn=#(define-event-function (parser location arg) (markup?)
         (make-dynamic-script arg))
\relative c' { c\dyn pfsss }
@end lilypond

@item
Se puede incluir una lista de alias en ASCII para caracteres
especiales.

@lilypond[quote,verbatim]
\paper {
  #(include-special-characters)
}
\markup "&bull; &dagger; &copyright; &OE; &ss; &para;"
@end lilypond

@item
Hay una instrucción nueva @code{define-scheme-function} en analogía
con @code{define-music-function} que puede usarse para definir
funciones que se evalúan a expresiones de Scheme pero aceptan
argumentos en la sintaxis de LilyPond.

@item
Ahora se puede utilizar la construcción @code{#@{ @dots{} #@}} no solo
para crear listas secuenciales de música, sino también para eventos
musicales únicos, expresiones musicales vacías, post-eventos,
elementos de marcado (sobre todo para liberar a los usuarios de la
necesidad de usar la macro @code{markup}), listas de marcado,
expresiones numéricas, definiciones y modificaciones de contextos y
algunas otras cosas.  Si no contiene nada o contiene un único evento
musical, ya no devuelve una lista secuencial de música, sino una
expresión musical vacía o simplemente el propio evento musical,
respectivamente.

@item
Nueva opción de la línea de órdenes @option{--loglevel=@var{level}}
para controlar el volumen de datos que LilyPond produce en la salida.
Los valores posibles son ERROR (errores), WARN (advertencias),
BASIC_PROGRESS (progreso básico), PROGRESS (progreso) y DEBUG
(depuración).

@item
@code{\set \once} ahora reinicia correctamente el valor de la
propiedad al valor previo.

@lilypond[fragment,quote,relative=2]
  \set fingeringOrientations = #'(left)
  <e-1>4
  \once \set fingeringOrientations = #'(right)
  <e-1>
  <e-1>-"left"
@end lilypond

@item
La alineación de los elementos de matiz dinámico extensos
(reguladores, crescendi textuales, etc.) se divide automáticamente si
se da explícitamente una dirección distinta.

@lilypond[fragment,quote,relative=2]
c4_\< c c^\> c c1_\p
@end lilypond


@item
Ahora las apoyaturas y mordentes funcionan también dentro de una
ligadura de expresión, y no solo dentro de una ligadura de fraseo.
Asimismo, se ha añadido la función @code{\slashedGrace} que no imprime
ninguna ligadura partiendo de la nota del mordente.

@lilypond[fragment,relative=2]
c4( \appoggiatura e8 d4 \acciaccatura e8 d4 \slashedGrace e8 c4)
@end lilypond


@item
Para suprimir a línea en un elemento de crescendo extenso (y otros
elementos extensos similares), LilyPond contempla ahora de forma plena
la propiedad @code{#'style = #'none}.

@lilypond[fragment,quote,relative=2]
\override DynamicTextSpanner #'style = #'none
c4\cresc c c g, c'\p
@end lilypond

@item
LilyPond.app está disponible ahora para MacOS X 10.7. ¡Gracias,
Christian Hitz!

@item
Los glissandos pueden abarcar varias líneas.

@end itemize

@ifhtml
Para ver noticias anteriores, diríjase a
@uref{http://lilypond.org/doc/v2.14/Documentation/changes/},
@uref{http://lilypond.org/doc/v2.12/Documentation/topdocs/NEWS.html},
o @uref{../,vuelva} al índice de la documentación.


@end ifhtml

@bye
